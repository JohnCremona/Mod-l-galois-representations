Attach("/home/jj/Programs/magma/+IdealsNF.m" );

/* The main function, mintwin(f), at the bottom computes the minimal twin of a
   number field.  There is first some group theoretic data to speed
   up the search so we know where to look for the field. */

/* twindata[n,t] tells us about nTt with
   0 = no low degree siblings
   -1 = twins of the same degree
    j>0 means lowest degree is j

   Currently goes through degree 23
*/
twindata:= [[ 0 ], [ 0 ], [ 0, 0 ], [ 0, 0, -1, 0, 0 ], [ 0, 0, 0, 0, 0 ],
    [ 0, 3, -1, 4, 0, 0, 4, 4, 0, -1, -1, 5, -1, 5, -1, -1 ],
    [ 0, 0, 0, 0, -1, 0, 0 ],
    [ 0, 0, 0, 4, 0, -1, 0, 0, -1, -1, -1, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, 6, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 7, -1, -1, -1, -1,
    0, 0, -1, 0, 0, 0, -1, 0, 0 ],
    [ 0, 0, 0, 6, 0, 0, -1, 6, 6, 0, -1, -1, -1, 0, 0, 6, -1, -1, 0, -1, -1, -1,
    0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
    [ 0, 5, -1, 5, -1, -1, 5, -1, -1, -1, 0, 5, 5, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, 6, -1, 0, -1, 0, 0, 6, 0, 0, 0, 0, -1, -1, -1, 0, 0, 0,
    0, 0, 0 ],
    [ 0, 0, 0, 0, -1, 0, 0, 0 ],
    [ 0, 0, 6, 4, 0, 6, 6, 4, 4, -1, -1, -1, -1, -1, -1, 6, 6, 0, 0, -1, 6, 6,
    6, 6, -1, -1, -1, -1, 0, -1, -1, -1, 5, 6, 6, 6, -1, -1, -1, -1, -1, -1, 0,
    -1, 0, 9, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 8, -1, -1, -1, -1,
    -1, -1, 8, 8, 8, 8, 0, 0, -1, -1, 5, 10, 10, -1, -1, -1, -1, -1, -1, 0, 9,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, 8, 8, 8, 8, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 9, 10,
    -1, -1, 8, -1, 8, 8, -1, -1, 9, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 0, 0, 8, 8, 8, 8, -1,
    8, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 11, -1, 10, 10, 6, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 8, 8, 8, 0,
    0, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, 0, -1, 10, -1, -1, -1, -1,
    -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1,
    -1, -1, 0, -1, -1, -1, 10, -1, -1, 11, 0, -1, 0, 0, 0, 10, 10, 0, -1, 0, 0,
    0, -1, -1, -1, 10, 0, 0, 0, 0, -1, 0, -1, -1, -1, -1, -1,0,0 ],
    [ 0, 0, 0, 0, 0, 0, -1, 0, 0 ],
    [ 0, 7, -1, 7, 0, 8, -1, -1, 0, 7, 8, -1, -1, -1, 0, 8, -1, 0, -1, -1, -1,
    0, -1, -1, 0, 0, -1, -1, -1, 0, 0, -1, -1, 8, 0, 0, 0, -1, 0, -1, -1, -1,
    -1, 0, 0, 7, 0, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1,0,0,0,0,0,0 ],
[ 0, 0, 0, 0, 5, 0, 0, 0, -1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1,
    -1, 0, 0, -1, -1, -1, 6, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1,
    -1, -1, -1, -1, -1, 7, 0, -1, 0, 0, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, -1,
    0, -1, 0, 0, 0, 0, -1, 0, 0, 8, 0, 0, 0, -1, -1, -1, 0, 0, 0, 0, -1,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[ 0, 0, 0, 0, 0, 8, 0, 0, 8, 8, 8, 8, 8, 0, -1, -1, -1, -1, -1, -1, -1, 0, 8,
-1, -1, -1, 0, 8, -1, -1, -1, -1, 8, -1, 8, 8, -1, 8, 8, 0, 8, 8, -1, -1, 8,
8, -1, -1, 0, -1, -1, 8, 8, -1, 0, -1, 12, 12, 0, 0, 6, 12, 12, 12, 0, 8, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, 0,
-1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 8, 8, 8,
8, -1, 0, -1, -1, 8, 0, -1, -1, -1, -1, 8, 8, 8, -1, -1, -1, 8, -1, 8, 8, -1,
8, -1, -1, -1, 0, 8, 8, 8, -1, -1, -1, -1, -1, -1, 8, 8, 8, 8, 8, 8, 8, -1, -1,
-1, -1, -1, 10, 12, -1, 12, 12, 8, 0, 12, 12, -1, -1, -1, -1, 12, -1, 12, 8, 12,
14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,

-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 0, 12, 10, 14, 8, 14, 0, -1, -1, -1, 12, -1, -1, -1, -1, 12, 12, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, 12, 8, 12, -1, 0, -1, 8, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 12, -1, 8, 8, 8, 0, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, 0, -1, 14, 0, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 12, 12, 12, 12, 0, 8, 12, 8, 8, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 12, 12, 12, 12, 12, 12, -1, -1, 0, 14, -1, 14, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 0, 0, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, 0, -1, -1, -1, 0, 0, 0, -1, -1, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 8, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0,  0, 0, 0, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, -1, -1, 0, -1,0,0,0,0,0,0 ],
[0,0,0,0,0,0,0,0,0,0],
[0, 0, 6, 9, 9, 12, 0, 12, 6, 6, 6, -1, -1, 0, -1, 0, -1, 9, 0, 9, 9, 9, -1, 9, 0, 0, 12, 9, 12, 12, 12, 12, 12, 6, 9, 6, 12, 0, -1, 12, -1, -1, 12, 12, -1, 12, -1, -1, -1, 0, 9, -1, 12, 12, 9, 9, 9, -1, -1, -1, -1, 12, 12, -1, 12, -1, -1, 9, 12, 12, 9, 12, 9, -1, -1, 0, -1, -1, -1, 0, -1, 0, 0, 0, 9, 9, 0, 9, -1, 15, -1, -1, 12, -1, 12, 12, 0, 0, -1, -1, -1, -1, 12, 12, -1, 12, 0, -1, 0, -1, -1, 8, 8, 16, 16, 12, 12, -1, -1, 12, 0, 0, 12, -1, -1, -1, -1, -1, 9, -1, -1, 0, 0, -1, -1, 9, 9, -1, -1, -1, 9, 9, 9, 15, 15, 15, -1, -1, -1, 12, 0, 0, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, 12, 12, 8, 8, 16, 8, -1, 8, 8, 16, 16, -1, 12, 12, -1, 12, 12, -1, 12, 12, 9, 9, -1, -1, -1, 9, -1, 9, -1, 9, 9, -1, -1, 12, -1, 12, 12, 12, -1, 12, 9, 9, 9, 9, 9, 9, 9, 9, -1, -1, 15, -1, -1, -1, -1, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1, 12, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 12, -1, 12, 12, 12, 12, 12, 8, 8, 8, 8, 12, 12, 12, 12, -1, -1, -1, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12, -1, 12, 12, 12, 12, 12, -1, 9, -1, -1, 9, 12, -1, -1, 12, -1, -1, -1, 9, 9, -1, 9, 9, -1, -1, 12, 9, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 12, 0, 0, -1, -1, -1, -1, 0, -1, -1, -1, 0, 0, 12, 12, -1, 0, -1, 0, -1, -1, -1, -1, 0, 12, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, 12, 12, -1, 12, 12, -1, 12, 0, 0, 12, -1, -1, 0, -1, 12, 12, -1, 12, 12, 0, 12, 12, 0, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 12, 12, 12, 12, 12, 12, 12, 12, 0, 0, -1, -1, 0, -1, 0, 0, 0, 0, 12, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, 0, 0, 0, -1, -1, 12, 12, 0, 0, 12, 0, 0, 0, 12, 12, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, 0, -1, -1, 0, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, 12, 12, 12, 12, -1, -1, 0, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, 0, 0, 0, 12, -1, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 12, 12, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, 0, 0, 0, 0, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 16, -1, 16, -1, 0, -1, 16, 16, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, -1, 12, 12, 12, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1, -1, -1, 16, 16, 16, 16, -1, 0, -1, -1, -1, -1, 12, 12, 0, -1, 12, 12, 12, 12, -1, -1, 12, 12, 12, 12, 12, 0, 12, -1, 12, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 0, 0, -1, 0, -1, -1, -1, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 0, -1, 12, -1, -1, 12, 12, -1, 12, 12, -1, -1, 12, -1, 12, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0, 16, 16, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, 0, -1, 0, 0, -1, 0, 0, -1, -1, -1, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, -1, 0, -1, 0, -1, 0, -1, -1, -1, 0, 0, 0, -1, 0, -1, -1, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1, 15, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 0, -1, 0, -1, -1, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 15, 15, 0, 0, 0, 0, 0, 15, 15, 15, 0, 0, 15, 0, 0, 0, 0, 0, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 10, 5, -1, 0, -1, 10, -1, -1, -1, 10, 0, 5, -1, 10, -1, -1, -1, -1, -1, 10, -1, -1, 0, 10, 10, 0, 5, 10, 5, 0, 0, 5, 10, 0, 10, 10, 10, 10, -1, 10, 10, 10, 10, 10, 10, -1, 10, 0, -1, -1, 10, 10, 10, 10, -1, -1, -1, 0, 10, 0, 0, 10, 12, 16, 0, 0, 10, 10, -1, 10, -1, -1, 10, 10, 10, 10, 10, 10, -1, 10, -1, 10, -1, 10, 10, 6, 10, -1, -1, -1, -1, -1, 10, 10, -1, -1, -1, -1, 0, -1, 10, -1, -1, 10, -1, 10, -1, -1, -1, -1, -1, 10, 0, -1, -1, -1, -1, 0, 16, -1, -1, -1, -1, -1, -1, 10, -1, 10, 10, 10, 10, 10, -1, 10, -1, -1, 10, -1, -1, -1, -1, 6, 10, 0, 10, 6, 10, 12, 12, -1, -1, 10, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 10, -1, 10, -1, -1, 10, 16, -1, 16, 16, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 12, -1, 10, -1, 0, 10, -1, 0, 0, 10, 15, -1, -1, -1, -1, -1, -1, -1, 16, 10, 10, 0, 16, 10, 10, 10, 10, 10, -1, 12, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 16, 15, 15, 15, -1, 0, 0, -1, 10, 0, -1, -1, 10, 12, 12, 0, 0, -1, 10, -1, -1, 10, 10, 0, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 15, 15, 15, 0, 10, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 0, 15, -1, 10, 10, 0, 10, 0, 10, -1, -1, -1, -1, -1, 0, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 0, -1, -1, -1, -1, -1, -1, 10, 10, 0, 10, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, 0, -1, -1, -1, 0, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, 0, -1, -1, -1, 0, -1, -1, -1, 0, -1, -1, -1, 0, -1, 0, -1, -1, 0, -1, -1, -1, 0, -1, 0, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1, -1, 0, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, -1, 0, 0, 0, 0, -1, -1, -1, 12, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, -1, 12, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, -1, -1, 0, -1, 0, 0, 0, 0, 0, -1, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0],
[0, 7, 0, 7, 0, 0, -1, 0, -1, 0, 0, -1, -1, 7, 0, -1, 14, 14, -1, 8, -1, -1, 14, -1, 14, 14, -1, -1, 14, -1, -1, -1, 7, -1, -1, 0, -1, 7, -1, -1, -1, -1, -1, 0, 0, 0, 0, -1, 0, -1, -1, -1, 0, 0, -1, 0, 0, 0, -1, -1, -1, 0, -1, -1, -1, 0, -1, -1, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, -1, -1, -1, 0, 0, 0, 0, -1, -1, -1, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, -1, 0, -1, 0, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1, -1, -1, 0, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 11, -1, 11, 0, -1, -1, -1, -1, -1, -1, 0, -1, 12, -1, 0, 0, -1, 0, -1, 0, 11, -1, 0, 0, 0, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1, 11, 0, -1, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0]
];

// Degree to search for minimal sibling, if it is not in the table above
function minn(g,n)
  s:= SubgroupClasses(g);
  s:= [b : b in s | Order(Core(g,b`subgroup)) eq 1];
  Sort(~s, func<x,y | y`order-x`order>);
  n1 := Index(g,s[1]`subgroup);
  if n1 lt n then
    return n1;
  end if;
  if (#s eq 1) or (s[1]`order ne s[2]`order) then
    return 0;
  end if;
  return -1;
end function;

// Front end to twindata information
function twind(n,t)
  if n lt 24 then
    return twindata[n][t];
  end if;
  // Next would fail if we didn't screen out degree <7
  if t gt NumberOfTransitiveGroups(n)-2 then
    return 0;
  end if;
  return minn(TransitiveGroup(n,t),n);
end function;

// String utilities
function DelSpaces(s)
  return &cat([x: x in Eltseq(Sprint(s)) | (x ne " ") and (x ne "\n")]);
end function;

procedure write(filename,str: con:=false, rewrite:=false)
  if con then str; end if;
  F:=Open(filename,rewrite select "w" else "a");
  WriteBytes(F,[StringToCode(c): c in Eltseq(Sprint(str)*"\n")]);
  Flush(F);
end procedure;


// Need to polredabs resolvents
function Polredabs(f)
  R<x>:=PolynomialRing(Rationals());
  out := Sprintf("/tmp/polredabs%o.out", Random(10^30));
  txt := Sprintf("/tmp/polredabs%o.txt", Random(10^30));
  //write(txt,Sprintf("polredabs([%o,%o])",f, rmps): rewrite:=true);
  write(txt,Sprintf("polredabs(%o)",f): rewrite:=true);
  // Avoid hardwiring gp path
  System("which sage>"*out);
  gppath:= DelSpaces(Read(out));
  System("rm "* out);
  System(gppath*" -gp -f -q --default parisizemax=1G <"*txt*">"*out);
  //try
  f:=eval DelSpaces(Read(out));
  //catch e;
  //end try;
  System("rm "* out);
  System("rm "* txt);
  return f;
end function;

function absdisc(f,rmps)
  ans:=1;
  for p in rmps do
    ans *:= p^pDiscriminant(f,p);
  end for;
  return ans;
end function;

// Assumes f is already polredabs'ed
function mintwin(f)
  R<x> := PolynomialRing(Rationals());
  n := Degree(f);
  G,r,S := GaloisGroup(f);
  t := TransitiveGroupIdentification(G);
  twincode := twind(n, t);
  if twincode eq 0 then return f; end if;
  d:= twincode eq -1 select  n else twincode;

  order := Order(G) div d;
  ss:= Subgroups(G : OrderEqual:=order);
  ss:= [s : s in ss | Order(Core(G, s`subgroup)) eq 1];
  pols := <R ! DefiningPolynomial(NumberField( GaloisSubgroup(S, z`subgroup))) : z in ss>;
  pols := [Polredabs(g) : g in pols];
  dat := [[TransitiveGroupIdentification(GaloisGroup(z)),
    Abs(Discriminant(Integers(NumberField(z))))] cat Coefficients(z) : z in pols];
  Sort(~dat,~P);
  pols := PermuteSequence(pols, P);
  return pols[1];
end function;

function mintwinx(f, rmps)
  R<x> := PolynomialRing(Rationals());
  n := Degree(f);
  G,r,S := GaloisGroup(f);
  t := TransitiveGroupIdentification(G);
  twincode := twind(n, t);
  if twincode eq 0 then return f; end if;
  d:= twincode eq -1 select  n else twincode;
  rmps:=[z : z in rmps];

  order := Order(G) div d;
  ss:= Subgroups(G : OrderEqual:=order);
  ss:= [s : s in ss | Order(Core(G, s`subgroup)) eq 1];
  pols := <R ! DefiningPolynomial(NumberField( GaloisSubgroup(S, z`subgroup))) : z in ss>;
  pols := [Polredabs(g) : g in pols];
  S<y> := PolynomialRing(Integers());
  dat := [[TransitiveGroupIdentification(GaloisGroup(z)),
    absdisc(S!z,rmps)] cat Coefficients(z) : z in pols];
  Sort(~dat,~P);
  pols := PermuteSequence(pols, P);
  return pols[1];
end function;

